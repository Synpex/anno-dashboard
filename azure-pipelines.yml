trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'DockerHubConnection'  
  imageName: 'sebastianpreis/annodashboard'  
  tag: '$(Build.BuildId)'

stages:
  - stage: Build
    displayName: Build and Test
    jobs:
      - job: Build
        displayName: Build Image
        pool:
          name: upcode-dev.at  # Specify your custom pool here
        steps:
          - checkout: self
            submodules: true

          - task: Docker@2
            displayName: Build Docker Image
            inputs:
              command: build
              dockerfile: '**/Dockerfile'
              repository: $(imageName)
              tags: |
                $(tag)

          - task: Docker@2
            displayName: Push Image to DockerHub
            inputs:
              command: push
              repository: $(imageName)
              dockerRegistryServiceConnection: $(dockerRegistryServiceConnection)
              tags: |
                $(tag)

  - stage: Test
    displayName: Run Unit Tests
    jobs:
      - job: DjangoTests
        displayName: Django Unit Tests
        pool:
          name: upcode-dev.at
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            submodules: true
          - script: |
              docker run -e DJANGO_ENV=local "$(imageName):$(tag)" python manage.py migrate
              docker run -e DJANGO_ENV=local "$(imageName):$(tag)" python manage.py test
            displayName: Run Django Unit Tests
  - stage: Deploy
    displayName: Deploy to OpenShift UAT
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  # Deploy only if tests pass and it's the main branch
    jobs:
    - job: DeployJob
      displayName: Deploy Image to OpenShift UAT
      pool:
        name: upcode-dev.at 
      steps:
        - checkout: none
        - task: oc-cmd@3
          displayName: 'Create New OpenShift Deployment'
          continueOnError: true
          inputs:
            connectionType: 'OpenShift Connection Service'
            openshiftService: 'OpenShiftConnection'
            cmd: |
              oc new-app $(imageName):$(tag) --name=uat-anno-dashboard
              oc set env deployment/anno-dashboard --from=configmap/uat-anno-dashboard
              oc set env deployment/anno-dashboard --from=secret/uat-anno-dashboard
              oc expose svc/anno-dashboard 
            checkForErrors: 'false'

        - task: oc-cmd@3
          displayName: 'Update Existing OpenShift Deployment'
          inputs:
            connectionType: 'OpenShift Connection Service'
            openshiftService: 'OpenShiftConnection'
            cmd: |
              oc set image deployment/uat-anno-dashboard uat-anno-dashboard=$(imageName):$(tag)
            checkForErrors: 'true'